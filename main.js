// use the following helper functions in your solutionfunction each(coll, f) {	if (Array.isArray(coll)) {		for (var i = 0; i < coll.length; i++) {			f(coll[i], i);		}	} else {		for (var key in coll) {			f(coll[key], key);		}	}}function filter(array, predicate) {	var acc = [];	each(array, function(element, i) {		if (predicate(element, i)) {			acc.push(element);		}	});	return acc;}function map(array, func) {	var acc = [];	each(array, function(element, i) {		acc.push(func(element, i));	});	return acc;}  // Remember to relax :)//=======================================================================/*                                  Q1                                 *///=======================================================================//Depending on data modeling concept that you have learned:// create a factory function called makeComputer that represents computers,// what different attributes computers may have? create two computers object from your factory function and save them in one array called computers!// Note: please write one or two lines here describing your solution.// variable computers contain objects, function make computer will get arugments as propreties of the computer and push it to computedvar computers = [];function makeComputer(type, price) {    var Obj = {    	type : type,    	price : price    };    computers.push(Obj);}makeComputer('Asus', 1500);makeComputer('Apple', 2700);// write function displayComputer that can be used to display one computer.// function display Computer will return the object computerfunction displayComputer(computer) {    return computer;}//=============================================================================/*                                  Q2                                       *///=============================================================================//Write a function that takes an array of strings as a input,and returns an array //of all of those strings, but transformed to upper case. //You can use toUpperCase method to convert a string to upper case.//solve it using the most appropriate helper functions(each,map,filter).// Note: please write one or two lines here describing your solution.// var strArr = ['hello', 'world', 'whirled', 'peas'];// uppercaseAll(strArr); ==> [ 'HELLO', 'WORLD', 'WHIRLED', 'PEAS' ]// We will use map in this function for reason it will return an updated coppy of the array and callback function will just return the string to upper casefunction uppercaseAll(arrayOfStrings) {     return map(arrayOfStrings, function(value, index){     	return value.toUpperCase();     }); }//=============================================================================/*                                  Q3                                       *///=============================================================================//write a function that takes array of objects  as an input and returns an array//with only the countries that have a population higher than 500 million.//solve it using one of the most appropriate helperthe helpers functions(each,map,filter).//Here’s the data you’ll work with:var data = [{	country: 'China',	population: 1409517397,},{	country: 'India',	population: 1339180127,},{	country: 'USA',	population: 324459463,},{	country: 'Indonesia',	population: 263991379,}];// highestPopulation(data); ==> [{country: "China", population: 1409517397},{country: "India", population: 1339180127}]// Note: please write one or two lines here describing your solution.// here we will hape to use filter function, only reason is we have to return an array of less or equal length depending if the condition is true or falsefunction highestPopulation(arrayOfObjects) {	const minPopulation = 500000000;	return filter(arrayOfObjects, function(value, index){		if(value.population > minPopulation){			return value;		}	});}//=============================================================================/*                              Q4                                           *///=============================================================================//Write a function halveAll that takes an array of numbers as a input and returns an array// of all of those numbers halved (divided by two).//Note: solve it using the most appropriate helper functions(each,map,filter)// var numsArray = [2, 6, 20, 8, 14];// halveAll(numsArray); ==> [ 1, 3, 10, 4, 7 ]// Note: please write one or two lines here describing your solution.// here we have to use map function cause we have to return a coppy of the array but with half valuesfunction halveAll(numbers) {	return map(numbers, function(value, index){		return value = value / 2;	});}//=============================================================================/*                                  Q5                                       *///=============================================================================//write a function called values that accepts an object as a parameter, and outputs an array of the object's values.//solve it using one of the most appropriate helpers functions(each,map,filter).// values({first : 5, second: 'something' , third : 129}) ==> [5, 'something', 129]; // Note: please write one or two lines here describing your solution.// here also we can use each function cause we have to loop through the object and return it's values to an arrayfunction values(obj) {	var arr = [];	for(var key in obj){		arr.push(obj[key]);	}	return arr;} 							//Good Luck :))